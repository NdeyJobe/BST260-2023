[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BST 260 Introduction to Data Science",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "index.html#downloading-course-materials-using-git",
    "href": "index.html#downloading-course-materials-using-git",
    "title": "BST 260 Introduction to Data Science",
    "section": "Downloading course materials using Git",
    "text": "Downloading course materials using Git\nYou can download the quarto files used to create the course notes using Git. You can update files using git pull but you will not be able to change the course notes on the main repository. This means that if you edit the files and then try to update then using git pull you will encounter conflicts. For this reason recommend that you make a copy before editing files. We have edited the .gitignore file so that if you add the word notes to your filenames, git will not track the files. So we recommend that you before editing you make a copy of the file and notes to the filename. For example 01-unix.qmd to 01-unix-notes.qmd.\nYou can download the files using git clone like this:\n\nOpen a terminal and navigate to the directory you want to keep these notes in.\nType git clone  https://github.com/datasciencelabs/2023.git\n\nor using RStudio like this:\n\nGot to https://github.com/datasciencelabs/2023\nClick on the green “Clone or Download” on Github and copy the link.\nOpen RStudio, and go to File &gt; New Project &gt; Version Control &gt; Git, and paste in the link you just copied. Under “Create Project as Sub-directory of”, browse and select a folder where you want the course materials to go.\nPress “Create Project”. This will create a folder called 2023 in the folder you selected in step 3.\nNow, you can open this project using the projects tab in the upper right of RStudio, or going to File &gt; Open Project and then navigating to the 2023 folder and opening the .Rproj file.\n\nOnce you cloned the course repository and want to get updates, you must use git pull to get updates. You can do this in the terminal or on the RStudion Git pane.\n\nAssociating an existing directory\nIf you already cloned the repository outside of RStudio, you can associate the directory that was created in that step with RStudio. In RStudio, go to File &gt; New Project &gt; Existing Directory, and then navigate / click on the 2023 folder. Then click “Create Project”. Then you can follow step 5 above to open the project when you launch RStudio.\n\n\nForking the repository\nAn alternative more advanced way to cloning the directory is creating a fork. Forking a repository on GitHub allows you to create a copy of a project under your own GitHub account. This lets you make changes without affecting the original repository. Here’s how you can fork a repository on GitHub:\n\nLog In to GitHub:\n\nMake sure you are logged in to your GitHub account.\n\nNavigate to the Repository:\n\nGo to the main page of the repository you want to fork: https://github.com/datasciencelabs/2023\n\nClick the ‘Fork’ Button:\n\nIn the top-right corner of the repository’s page, you’ll find the “Fork” button. Click on it.\n\nChoose an Account:\n\nIf you are a member of any organizations, GitHub will ask you where you’d like to fork the repository. Choose your personal account unless you want to fork it to an organization.\n\nWait for the Forking Process to Complete:\n\nGitHub will then create a copy of the repository in your account. You’ll see an animation indicating the process, and once it’s done, you’ll be redirected to the forked repository under your account.\n\nClone Your Forked Repository:\n\nTo work with the forked repository on your local machine, you can clone it. Navigate to the main page of your forked repo, click on the green “Code” button, copy the URL, and then use the following command in your terminal or command prompt:\ngit clone [URL_you_copied]\n\n\nYou can continue to update the forked repository by doing the following:\n\nNavigate to Your Local Repository:\n\nOpen a terminal or command prompt.\nNavigate to the directory where you have your forked repository.\n\nAdd the Original Repository as an Upstream Remote:\n\nUse the following command to add the original repository as an upstream remote:\ngit remote add upstream [URL_of_original_repository]\nFor example, if the original repository’s URL is https://github.com/original-owner/original-repo.git, the command would be:\ngit remote add upstream https://github.com/original-owner/original-repo.git\n\nFetch Changes from the Upstream:\n\nUse the following command to fetch changes from the upstream:\ngit fetch upstream\n\nMerge Changes into Your Local Branch:\n\nFirst, ensure you are on the branch into which you want to merge the upstream changes, typically the main or master branch:\ngit checkout main\nThen, merge the changes from the upstream’s main or master branch:\ngit merge upstream/main\n\nPush Changes to Your Forked Repository on GitHub (if needed):\n\nIf you want these changes to reflect in your GitHub fork, push them:\ngit push origin main\n\n\nNow your fork is synchronized with the original repository. Whenever you want to pull in new changes from the original repository in the future, you just need to repeat steps 3-5.\nTo avoid conflicts you sill want to avoid editing the course notes files and instead make copies."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Course description",
    "section": "",
    "text": "This course introduces UNIX/Linux shell, version control with git and GitHub, R programming, data wrangling with dplyr and data.table, data visualization with ggplot2 and shiny, and reproducible document preparation with RStudio, knitr and markdown. We briefly introduce Monte Carlo simulations, statistical modeling, high-dimensional data techniques, and machine learning and how these are applied to real data. Throughout the course, we use motivating case studies and data analysis problem sets based on challenges similar to those you encounter in scientific research.\nLectures will be mostly live coding. We will go over exercises and challenges together but will pause 1-4 times per lectures so students can complete exercises on their own. The midterm questions will be selected from the exercises presented in class. Some time will be dedicated to answering problem set questions. Lectures will not be recorded.\nStudents are required to have a GitHub account and create a repository for the course.\nProblem sets are mostly composed of open ended questions. Submission should be in the form of a scientific report. Problem set submission need to be completely reproducible. Specifically, students are expected to upload a Quarto document to their GitHub class repository that graders can compile into a readable report."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The schedule is subject to change.\n\n\n\n\n\n\nDate\n\n\nModule\n\n\nTopics\n\n\n\n\nMon, Aug 28\n\n\nProductivity Tools\n\n\n\n RStudio, RStudio Projects, Quarto, Unix\n\n\n\n\n\nWed, Aug 30\n\n\nProductivity Tools\n\n\n\nGit and GitHub      \n\n\n\n\n\nMon, Sep 4\n\n\n\nNo class\n\n\n\nLabor day\n\n\n\n\nWed, Sep 6\n\n\n\nR\n\n\n\n\n\nR Basics: The workspace, data types, coercing, lists, packages, namespaces, help, creating vectors, object oriented programming.\n\n\nVectorization: Vector arithmetics, sapply, split, cut, lapply, subsetting, sorting\n\n\n\n\n\n\nMon, Sep 11\n\n\nR \n\n\n\n\nIntroduction to Tidyverse: tidy data, mutate, select, filter, the pipe, summarize, group_by, sorting, and the purrr package\n\n\nDates and time: Date class and the lubridate package\n\n\n\n\n\n\nWed, Sep 13\n\n\nR\n\n\n\n\nImporting data\n\n\nFile types: binary, ascii, unicode\n\n\nLocalesImporting data\n\n\nDownloading files\n\n\n\n\nThe data.table package\n\n\n\n\n\n\nMon, Sep 18\n\n\nData visualization\n\n\n\n\nVisualizing Distributions: Summary statistics, distributions, histograms, smooth densities, the normal distribution, quantiles, percentiles, and boxplots.\n\n\nGrammar of graphics and the basics of the ggplot2 package\n\n\n\n\n\n\nWed, Sep 20\n\n\nData visualization\n\n\n\n\nData visualization principles\n\n\nggplot2 geometries\n\n\n\n\n\n\nFri, Sep 22\n\n\nProblem set 1 due\n\n\n\n\n\n\nMon, Sep 25\n\n\nData wrangling \n\n\n\n\nReshaping data\n\n\nJoining tables\n\n\n\n\n\n\nWed, Sep 27\n\n\nData wrangling \n\n\n\n\nWeb scraping\n\n\nString processing\n\n\nText mining\n\n\n\n\n\n\n\nMon, Oct 2\n\n\n\nProbability\n\n\n\n\nMonte Carlo simulations\n\n\nRandom Variables\n\n\nCentral Limit Theorem\n\n\nProbability case studies: Roulette, Poker, Birthday problem, Monte Hall, insurance\n\n\n\n\n\n\n\nWed, Oct 4\n\n\n\nInference\n\n\n\n\nPolls\n\n\nGuess the proportion of blue beads competition\n\n\nConfidence intervals\n\n\nData-driven models\n\n\n\n\n\n\n\nFri, Oct 6\n\n\n\nFinal project title due\n\n\n\n Submit title and a describe your plans to obtain data\n\n\n\n\n\n\nMon, Oct 9\n\n\n\nNo class\n\n\nIndigenous Peoples’ Day\n\n\n\n\n\nWed, Oct 11\n\n\n\nInference\n\n\n\n\nBayesian statistics\n\n\nHierarchical Models\n\n\nCase study: election forecasting\n\n\n\n\n\n\n\nMon, Oct 16\n\n\n\nMidterm 1\n\n\nIncludes all topics covered by October 11.\n\n\n\n\n\nWed, Oct 18\n\n\n\nLinear Models\n\n\n\n\nRegression and correlation\n\n\nCase study: is height hereditary?\n\n\nBivariate normal distribution, conditional expectations, least squares estimates\n\n\n\n\n\n\n\n\n\nMon, Oct 23\n\n\n\nLinear Models\n\n\n\n\nMultivariable regression\n\n\nCase study: build a baseball team\n\n\n\n\n\n\n\n\n\nWed, Oct 25\n\n\n\nLinear Models\n\n\n\n\nMeasurement error models\n\n\nTreatment effect models \n\n\nCase study: does a high-fat diet increase weight in mice?\n\n\n\n\n\n\n\nMon, Oct 30\n\n\n\nLinear Models\n\n\n\n\nAssociation tests\n\n\nCorrelation is not causation\n\n\n\n\n\n\n\nWed, Nov 1\n\n\n\nHigh dimensional data\n\n\n\n\nMatrices in R \n\n\nCase study: handwritten digits\n\n\n\n\n\n\n\nFri, Nov 3 \n\n\n\nProblem set 2 due\n\n\nOne paragraph description of projects that includes what dataset will be used.\n\n\n\n\n\nMon, Nov 6\n\n\n\nHigh dimensional data\n\n\n\nDimension reduction: Linear algebra, distance, PCA\n\n\n\n\n\n\nWed, Nov 8\n\n\n\nHigh dimensional data\n\n\n\n\nDimension reduction continued\n\n\nCase study: gene expression differences between ethnic groups.\n\n\n\n\n\n\n\nFri, Nov 10 \n\n\n\nProject description due\n\n\nOne paragraph description of projects that includes what dataset will be used.\n\n\n\n\n\nMon, Nov 13\n\n\n\n\nHigh dimensional data\n\n\n\n\n\nRegularization\n\n\nCase study: Recommendations systems in  movie ratings\n\n\n\n\nMatrix factorization\n\n\n\n\n\n\n\nWed, Nov 15\n\n\n\nHigh dimensional data \n\n\n\n\nIntroduction, definition of concepts, accuracy, test, training and validation sets\n\n\nEvaluation metrics: ROC curves, precision recall curves\n\n\n\n\n\n\n\nMon, Nov 20\n\n\n\nMidterm 2\n\n\nIncludes topics covered until Nov 15.\n\n\n\n\n\nWed, Nov 22\n\n\n\nNo class\n\n\n Thanksgiving\n\n\n\n\n\nMon Nov 27\n\n\n\nMachine Learning\n\n\n\n\nSmoothing\n\n\nCase study: Death rates after natural disasters\n\n\n\n\n\n\n\nWed, Nov 29\n\n\n\nMachine Learning\n\n\n\n\nCross-Validation\n\n\ncaret package\n\n\n\n\n\n\n\nMon, Dec 4\n\n\n\nMachine Learning\n\n\n\n Example of algorithms \n\n\n\nCase study: reading handwritten digits\n\n\n\n\n\n\n\nWed, Dec 6 \n\n\n\nOther topics\n\n\n\nPossible topcis (open to student requests)\n\n\n\nShiny\n\n\nInteractive graphics: plotly\n\n\nAdvanced Quarto\n\n\nResearch topics\n\n\nLarge language models\n\n\nDeep learning\n\n\n\n\n\n\n\nFri Dec 8\n\n\n\nProblem set 3 due\n\n\n\n\n\n\n\nMon, Dec 11\n\n\n\nHelp with project\n\n\n\n \n\n\n\n\n\n\nWed, Dec 13\n\n\n\nHelp with project\n\n\n\n\n\n\n\nWed, Dec 15\n\n\n\nFinal project due"
  },
  {
    "objectID": "01-quarto.html#r-and-rstudio",
    "href": "01-quarto.html#r-and-rstudio",
    "title": "1  Quarto",
    "section": "1.1 R and RStudio",
    "text": "1.1 R and RStudio\nBefore introducing Quarto we need R installed. We highly recommend using RStudio as an IDE for this course. We will be using it in lectures.\n\n1.1.1 Installation\n\nInstall the latest version (4.3.1) of R\nInstall RStudio\n\n\n\n\nrstudio\n\n\n\n\n1.1.2 Basics\nLet’s try a few things together:\n\nOpen a new R script file\nLearn tab complete\nRun commands while editing scripts\nRun the entire script\nMake a plot\nChange options to never save workspace.\n\n\n\n1.1.3 Projects\n\nStart new project in exciting directory.\nStart new project in new directory.\nChange projects."
  },
  {
    "objectID": "01-quarto.html#markdown",
    "href": "01-quarto.html#markdown",
    "title": "1  Quarto",
    "section": "1.2 Markdown",
    "text": "1.2 Markdown\nStart a new Quarto.\n\n1.2.1 Type of editor\n\nSource - See the actual code (WYSIWYG).\nVisual - Partial preview of final document.\n\n\n\n1.2.2 The header\nAt the top you see:\n---\ntitle: \"Untitled\"\n---\nThe things between the --- is the YAML header.\nYou will see it used throughout the Quarto guide.\n\n\n1.2.3 Text formating\nitalics, bold, bold italics\nstrikethrough\ncode\n\n\n1.2.4 Headings\n# Header 1\n## Header 2\n### Header 3\nand so on\n\n\n1.2.5 Links\nJust the link: https://quarto.org/docs/guide/\nLinked text: This is the link to Quarto Guide\n\n\n1.2.6 Images\n\n\n\nFirst week of data science\n\n\nThe image can also be a local file.\n\n\n1.2.7 Lists\nBullets:\n\nbullet 1\n\nsub-bullet 1\nsub-bullet 2\n\nbullet 2\n\nOrdered list\n\nItem 1\nItem 2\n\n\n\n1.2.8 Equations\nInline: \\(Y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i\\)\nDisplay math:\n\\[\n\\mathbf{Y} = \\mathbf{X\\beta} + \\mathbf{\\varepsilon}\n\\]"
  },
  {
    "objectID": "01-quarto.html#computations",
    "href": "01-quarto.html#computations",
    "title": "1  Quarto",
    "section": "1.3 Computations",
    "text": "1.3 Computations\nThe main reason we use Quarto is because we can include code and execute the code when compiling the document. In R we refer to them as R chunks.\nTo add your own R chunks, you can type the characters above quickly with the key binding command-option-I on the Mac and Ctrl-Alt-I on Windows.\nThis applies to plots as well; the plot will be placed in that position. We can write something like this:\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\nBy default, the code will show up as well. To avoid having the code show up, you can use an argument, which are annotated with |# To avoid showing code in the final document, you can use the argument echo: FALSE. For example:\n\n\n[1] 3\n\n\nWe recommend getting into the habit of adding a label to the R code chunks. This will be very useful when debugging, among other situations. You do this by adding a descriptive word like this:\n\nx &lt;- 1\ny &lt;- 2\nx + y\n\n[1] 3\n\n\n\n1.3.1 Academic reports\nQuarto has many nice features that facilitates publishing academic reports in this guide\n\n\n1.3.2 Global excecution options\nIf you want to apply an option globally, you can include in the header, under execute. For example adding the following line to the header make code not show up, by default:\nexecute:\n  echo: false\n\n\n1.3.3 More on markdown\nThere is a lot more you can do with R markdown. We highly recommend you continue learning as you gain more experience writing reports in R. There are many free resources on the internet including:\n\nRStudio’s tutorial: https://quarto.org/docs/get-started/hello/rstudio.html\nThe knitR book: https://yihui.name/knitr/\nPandoc’s Markdown in-depth documentation"
  },
  {
    "objectID": "01-quarto.html#sec-knitr",
    "href": "01-quarto.html#sec-knitr",
    "title": "1  Quarto",
    "section": "1.4 knitR",
    "text": "1.4 knitR\nWe use the knitR package to compile Quarto. The specific function used to compile is the knit function, which takes a file name as input. RStudio provides the Render button that makes it easier to compile the document.\nNote that the first time you click on the Render button, a dialog box may appear asking you to install packages you need. Once you have installed the packages, clicking Render will compile your Quarto file and the resulting document will pop up.\nThis particular example produces an html document which you can see in your working directory. To view it, open a terminal and list the files. You can open the file in a browser and use this to present your analysis. You can also produce a PDF or Microsoft document by changing:\nformat: html to format: pdf or format: docx. We can also produce documents that render on GitHub using format: gfm, which stands for GitHub flavored markdown, a convenient way to share your reports."
  },
  {
    "objectID": "01-quarto.html#exercises",
    "href": "01-quarto.html#exercises",
    "title": "1  Quarto",
    "section": "1.5 Exercises",
    "text": "1.5 Exercises\n\nWrite a Quarto document that defines variables \\(a=1, b=-1, c=-2\\) and print out the solutions to \\(f(x) = ax^2+bx+c=0\\). Do not report complex solutions, only real numbers.\nInclude a graph of \\(f(x)\\) versus \\(x\\) for \\(x \\in (-5,5)\\).\n\nThis is how you make a plot of a quadratic function:\n\na &lt;- 1 \nb &lt;- -1\nc &lt;- -2\nx &lt;- seq(-5, 5, length = 300)\nplot(x, a*x^2 + b*x + c, type = \"l\")\nabline(h = 0, lty = 2)\n\n\n\n\n\nGenerate a PDF report using knitr. Do not show the R code, only the solutions and explanations of what the reader is seeing.\nErase the PDF report and reproduce it but this time using \\(a=1, b=2, c=5\\).\nErase the PDF report and reproduce it but this time using \\(a=1, b=3, c=2\\).\nCreate an HTML page with the results for this last set of values, but this time showing the code."
  },
  {
    "objectID": "01-unix.html#naming-convention",
    "href": "01-unix.html#naming-convention",
    "title": "Unix",
    "section": "Naming convention",
    "text": "Naming convention\nIn general you want to name your files in a way that is related to their contents and specifies how they relate to other files. The Smithsonian Data Management Best Practices has “five precepts of file naming and organization” and they are:\n\n\n\nHave a distinctive, human-readable name that gives an indication of the content.\nFollow a consistent pattern that is machine-friendly.\nOrganize files into directories (when necessary) that follow a consistent pattern.\nAvoid repetition of semantic elements among file and directory names.\nHave a file extension that matches the file format (no changing extensions!)\n\n\n\nFor specific recommendations we highly recommend you follow The Tidyverse Style Guide1."
  },
  {
    "objectID": "01-unix.html#the-terminal",
    "href": "01-unix.html#the-terminal",
    "title": "Unix",
    "section": "The terminal",
    "text": "The terminal\n\necho \"Hello world\"\n\nHello world"
  },
  {
    "objectID": "01-unix.html#sec-filesystem",
    "href": "01-unix.html#sec-filesystem",
    "title": "Unix",
    "section": "The filesystem",
    "text": "The filesystem\n\nDirectories and subdirectories\n\n\n\nfilesystem\n\n\n\n\nThe home directory\n\n\n\n\n\n\nHome directory in Windows\n\n\n\n\n\n\n\nHome directory in MacOS\n\n\n\n\n\nThe structure on Windows looks something like this:\n\nAnd on MacOS something like this:"
  },
  {
    "objectID": "01-unix.html#working-directory",
    "href": "01-unix.html#working-directory",
    "title": "Unix",
    "section": "Working directory",
    "text": "Working directory\nThe working directory is the directly you are currently in. Later we will see that we can move to other directories using the command line. It’s similar to clicking on folders.\nYou can see your working directory like this:\n\npwd\n\n/Users/rafa/Documents/teaching/bst260/2023\n\n\nIn R we can use\n\ngetwd()\n\n[1] \"/Users/rafa/Documents/teaching/bst260/2023\""
  },
  {
    "objectID": "01-unix.html#sec-paths",
    "href": "01-unix.html#sec-paths",
    "title": "Unix",
    "section": "Paths",
    "text": "Paths\nThis string returned in previous command is full path to working directory.\nThe full path to your home directory is stored in an environment variable, discussed in more detail later:\n\necho $HOME\n\n/Users/rafa\n\n\nIn Unix, we use the shorthand ~ as a nickname for your home directory\nExample: the full path for docs (in image above) can be written like this ~/docs.\nMost terminals will show the path to your working directory right on the command line.\nExercise: Open a terminal window and see if the working directory is listed."
  },
  {
    "objectID": "01-unix.html#unix-commands",
    "href": "01-unix.html#unix-commands",
    "title": "Unix",
    "section": "Unix commands",
    "text": "Unix commands\n\nls: Listing directory content\n\n\nls\n\n\n\nmkdir and rmdir: make and remove a directory\n\nmkdir projects\n\nIf you do this correctly, nothing will happen: no news is good news. If the directory already exists, you will get an error message and the existing directory will remain untouched.\nTo confirm that you created these directories, you can list the directories:\n\nls\n\nYou should see the directories we just created listed.\n\nmkdir docs teaching\n\nIf you made a mistake and need to remove the directory, you can use the command rmdir to remove it.\n\nmkdir junk\nrmdir junk\n\n\n\ncd: navigating the filesystem by changing directories\n\ncd projects\n\nTo check that the working directory changed, we can use a command we previously learned to see our location:\n\npwd"
  },
  {
    "objectID": "01-unix.html#autocomplete",
    "href": "01-unix.html#autocomplete",
    "title": "Unix",
    "section": "Autocomplete",
    "text": "Autocomplete\nIn Unix you can auto-complete by hitting tab. This means that we can type cd d then hit tab. Unix will either auto-complete if docs is the only directory/file starting with d or show you the options. Try it out! Using Unix without auto-complete will make it unbearable.\n\ncd contined\nGoing back one:\n\ncd ..\n\nGoing home:\n\ncd ~\n\nor simply:\n\ncd\n\nStating put (later we see why useful)\n\ncd .\n\nGoing far:\n\ncd /c/Users/yourusername/projects\n\nUsing relative paths:\n\ncd ../..\n\nGoing to previous working directory\n\ncd -"
  },
  {
    "objectID": "01-unix.html#practice",
    "href": "01-unix.html#practice",
    "title": "Unix",
    "section": "Practice",
    "text": "Practice\nLet’s explore some examples of navigating a filesystem using the command-line. Download and expand this file into a temporary directory and you will have the data struct in the following image.\n\n\n\nPractitce file system\n\n\n\nSuppose our working directory is ~/projects, move to figs in project-1.\n\n\n\n\n\nNow suppose our working directory is ~/projects. Move to reports in docs in two different ways:\n\n\n\n\n\n\n\n\nSuppose we are in ~/projects/project-1/figs and want to change to ~/projects/project-2. Show two different ways, one with relative path and one with full path."
  },
  {
    "objectID": "01-unix.html#more-unix-commands",
    "href": "01-unix.html#more-unix-commands",
    "title": "Unix",
    "section": "More Unix commands",
    "text": "More Unix commands\n\nmv: moving files\n\nmv path-to-file path-to-destination-directory\n\nFor example, if we want to move the file cv.tex from resumes to reports, you could use the full paths like this:\n\nmv ~/docs/resumes/cv.tex ~/docs/reports/\n\nYou can also use relative paths. So you could do this:\n\ncd ~/docs/resumes\nmv cv.tex ../reports/\n\nor this:\n\ncd ~/docs/reports/\nmv ../resumes/cv.tex ./\n\nWe can also use mv to change the name of a file.\n\ncd ~/docs/resumes\nmv cv.tex resume.tex\n\nWe can also combine the move and a rename. For example:\n\ncd ~/docs/resumes\nmv cv.tex ../reports/resume.tex\n\nAnd we can move entire directories. To move the resumes directory into reports, we do as follows:\n\nmv ~/docs/resumes ~/docs/reports/\n\nIt is important to add the last / to make it clear you do not want to rename the resumes directory to reports, but rather move it into the reports directory.\n\n\ncp: copying files\nThe command cp behaves similar to mv except instead of moving, we copy the file, meaning that the original file stays untouched.\n\n\nrm: removing files\nIn point-and-click systems, we remove files by dragging and dropping them into the trash or using a special click on the mouse. In Unix, we use the rm command.\n\n\n\n\n\n\nWarning\n\n\n\nUnlike throwing files into the trash, rm is permanent. Be careful!\n\n\nThe general way it works is as follows:\n\nrm filename\n\nYou can actually list files as well like this:\n\nrm filename-1 filename-2 filename-3\n\nYou can use full or relative paths. To remove directories, you will have to learn about arguments, which we do later.\n\n\nless: looking at a file\nOften you want to quickly look at the content of a file. If this file is a text file, the quickest way to do is by using the command less. To look a the file cv.tex, you do this:\n\ncd ~/docs/resumes\nless cv.tex \n\nTo exit the viewer, you type q. If the files are long, you can use the arrow keys to move up and down. There are many other keyboard commands you can use within less to, for example, search or jump pages."
  },
  {
    "objectID": "01-unix.html#sec-prep-project",
    "href": "01-unix.html#sec-prep-project",
    "title": "Unix",
    "section": "Preparing for a data science project",
    "text": "Preparing for a data science project\nWe are now ready to prepare a directory for a project. We will use the US murders project2 as an example.\nYou should start by creating a directory where you will keep all your projects. We recommend a directory called projects in your home directory. To do this you would type:\n\ncd ~\nmkdir projects\n\nOur project relates to gun violence murders so we will call the directory for our project murders. It will be a subdirectory in our projects directories. In the murders directory, we will create two subdirectories to hold the raw data and intermediate data. We will call these data and rda, respectively.\nOpen a terminal and make sure you are in the home directory:\n\ncd ~\n\nNow run the following commands to create the directory structure we want. At the end, we use ls and pwd to confirm we have generated the correct directories in the correct working directory:\n\ncd projects\nmkdir murders\ncd murders\nmkdir data rdas \nls\npwd\n\nNote that the full path of our murders dataset is ~/projects/murders.\nSo if we open a new terminal and want to navigate into that directory we type:\n\ncd projects/murders"
  },
  {
    "objectID": "01-unix.html#text-editors",
    "href": "01-unix.html#text-editors",
    "title": "Unix",
    "section": "Text editors",
    "text": "Text editors\nIn the course we will be using RStudio to edit files. But there will be situations in where this is not the most efficient approach. You might also need to write R code on a server that does not have RStudio installed. For this reason you need to learn to use a command-line text editors or terminal-based text editors. A key feature of these is that you can do everything you need on a terminal without the need for graphical interface. This is often necessary when using remote servers or computers you are not sitting in front off.\nCertainly! Command-line text editors are essential tools, especially for system administrators, developers, and other users who frequently work in a terminal environment. Here are some of the most popular command-line text editors:\n\nNano - Easy to use and beginner-friendly.\n\nFeatures: Simple interface, easy-to-use command prompts at the bottom of the screen, syntax highlighting.\n\nPico - Originally part of the Pine email client (Pico = PIne COmposer). It’s a simple editor and was widely used before Nano came around.\nVi or Vim - Vi is one of the oldest text editors and comes pre-installed on many UNIX systems. It is harder to use than Nano and Pico but is much more powerful. Vim is an enhanced version of Vi.\nEmacs - Another old and powerful text editor. It’s known for being extremely extensible.\n\nTo use these to edit a file you type, for example,\n\nnano filenmae"
  },
  {
    "objectID": "01-unix.html#advanced-unix",
    "href": "01-unix.html#advanced-unix",
    "title": "Unix",
    "section": "Advanced Unix",
    "text": "Advanced Unix\n\nArguments\n\nrm -r directory-name\n\nall files, subdirectories, files in subdirectories, subdirectories in subdirectories, and so on, will be removed. This is equivalent to throwing a folder in the trash, except you can’t recover it. Once you remove it, it is deleted for good. Often, when you are removing directories, you will encounter files that are protected. In such cases, you can use the argument -f which stands for force.\nYou can also combine arguments. For instance, to remove a directory regardless of protected files, you type:\n\nrm -rf directory-name\n\n\n\n\n\n\n\nWarning\n\n\n\nRemember that once you remove there is no going back, so use this command very carefully.\n\n\nA command that is often called with argument is ls. Here are some examples:\n\nls -a \n\n\nls -l \n\nIt is often useful to see files in chronological order. For that we use:\n\nls -t \n\nand to reverse the order of how files are shown you can use:\n\nls -r \n\nWe can combine all these arguments to show more information for all files in reverse chronological order:\n\nls -lart \n\nEach command has a different set of arguments. In the next section, we learn how to find out what they each do.\n\n\nGetting help\n\nman ls\n\nor\n\nls --help\n\n\n\nPipes\n\nman ls | less\n\nor in Git Bash:\n\nls --help | less \n\nThis is also useful when listing files with many files. We can type:\n\nls -lart | less \n\n\n\nWild cards\n\nls *.html\n\nTo remove all html files in a directory, we would type:\n\nrm *.html\n\nThe other useful wild card is the ? symbol.\n\nrm file-???.html\n\nThis will only remove files with that format.\nWe can combine wild cards. For example, to remove all files with the name file-001 regardless of suffix, we can type:\n\nrm file-001.* \n\n\n\n\n\n\n\nWarning\n\n\n\nCombining rm with the * wild card can be dangerous. There are combinations of these commands that will erase your entire filesystem without asking “are you sure?”. Make sure you understand how it works before using this wild card with the rm command.**\n\n\n\n\nEnvironment variables\nEarlier we saw this:\n\necho $HOME \n\nYou can see them all by typing:\n\nenv\n\nYou can change some of these environment variables. But their names vary across different shells. We describe shells in the next section.\n\n\nShells\n\necho $SHELL\n\nThe most common one is bash.\nOnce you know the shell, you can change environmental variables. In Bash Shell, we do it using export variable value. To change the path, described in more detail soon, type: (Don’t actually run this command though!)\n\nexport PATH = /usr/bin/\n\n\n\nExecutables\n\nwhich git\n\nThat directory is probably full of program files. The directory /usr/bin usually holds many program files. If you type:\n\nls /usr/bin\n\nin your terminal, you will see several executable files.\nThere are other directories that usually hold program files. The Application directory in the Mac or Program Files directory in Windows are examples.\nTo see where your system looks:\n\necho $PATH\n\nyou will see a list of directories separated by :. The directory /usr/bin is probably one of the first ones on the list.\nIf your command is called my-ls, you can type:\n\n./my-ls\n\nOnce you have mastered the basics of Unix, you should consider learning to write your own executables as they can help alleviate repetitive work.\n\n\nPermissions and file types\nIf you type:\n\nls -l\n\nAt the beginning, you will see a series of symbols like this -rw-r--r--. This string indicates the type of file: regular file -, directory d, or executable x. This string also indicates the permission of the file: is it readable? writable? executable? Can other users on the system read the file? Can other users on the system edit the file? Can other users execute if the file is executable? This is more advanced than what we cover here, but you can learn much more in a Unix reference book.\n\n\nCommands you should learn\n\ncurl - download data from the internet.\ntar - archive files and subdirectories of a directory into one file.\nssh - connect to another computer.\nfind - search for files by filename in your system.\ngrep - search for patterns in a file.\nawk/sed - These are two very powerful commands that permit you to find specific strings in files and change them.\nln - create a symbolic link. We do not recommend its use, but you should be familiar with it."
  },
  {
    "objectID": "01-unix.html#resources",
    "href": "01-unix.html#resources",
    "title": "Unix",
    "section": "Resources",
    "text": "Resources\nTo get started.\n\nhttps://www.codecademy.com/learn/learn-the-command-line\nhttps://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-1\nhttps://www.coursera.org/learn/unix"
  },
  {
    "objectID": "01-unix.html#exercises",
    "href": "01-unix.html#exercises",
    "title": "Unix",
    "section": "Exercises",
    "text": "Exercises\nYou are not allowed to use RStudio or point and click for any of the exercises below. Open a text file called commands.txt using a text editor and keep a log of the commands you use in the exercises below. If you want to take notes, you can use # to distinguish notes from commands.\n\nDecide on a directory where you will save your class materials. Navigate into the directory using a full path.\nMake a directory called project-1 and cd into that directory.\nMake directors called data: data, rdas, code, and docs.\nUse curl or wget to download the file https://raw.githubusercontent.com/rafalab/dslabs/master/inst/extdata/murders.csv and store it in rdas.\nCreate a R file in the code directory called code-1.R, write the following code in the file so that if the working directory is code it reads in the csv file you just downloaded. Use only relative paths.\n\n\nfilename &lt;- \"\"\ndat &lt;- read.csv(filename)\n\n\nAdd the following line to your R code so that it saves the file to the rdas directory. Use only relative paths.\n\n\nout &lt;- \"\"\ndat &lt;- save(dat, file = out)\n\n\nCreate a file code-2.R in the code directory. Use the following command to add a line to the file.\n\necho \"load('../rdas/murders.rda')\" &gt; code/code-2.R\nCheck to see if the line of code as added without opening a text editor.\n\nNavigate to the code directory and list all the files ending in .R.\nNavigate to the project-1 directory. Without navigating away, change the name of code-1.R to import.R, but keep the file in the same directory.\nChange the name of the project directory to murders. Describe what you have to change so the R script sill does the right thing and how this would be different if you had used full paths.\nBonus : Navigate to the murders directory. Read the man page for the find function. Use find to list all the files ending in .R."
  },
  {
    "objectID": "01-unix.html#footnotes",
    "href": "01-unix.html#footnotes",
    "title": "Unix",
    "section": "",
    "text": "https://style.tidyverse.org/↩︎\nhttps://github.com/rairizarry/murders↩︎"
  }
]